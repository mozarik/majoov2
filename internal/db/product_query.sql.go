// Code generated by sqlc. DO NOT EDIT.
// source: product_query.sql

package postgres

import (
	"context"
)

const addMerchantProduct = `-- name: AddMerchantProduct :one
INSERT INTO products (name, image, sku)
VALUES ($1, $2, $3) 
RETURNING id, name, image, sku
`

type AddMerchantProductParams struct {
	Name  string `json:"name"`
	Image string `json:"image"`
	Sku   string `json:"sku"`
}

func (q *Queries) AddMerchantProduct(ctx context.Context, arg AddMerchantProductParams) (Product, error) {
	row := q.queryRow(ctx, q.addMerchantProductStmt, addMerchantProduct, arg.Name, arg.Image, arg.Sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Image,
		&i.Sku,
	)
	return i, err
}

const getAllMerchantProducts = `-- name: GetAllMerchantProducts :many
SELECT id, name, image, sku FROM products
WHERE id = ANY(
	SELECT product_id FROM merchant_products
	WHERE merchant_id = $1
)
`

func (q *Queries) GetAllMerchantProducts(ctx context.Context, merchantID int32) ([]Product, error) {
	rows, err := q.query(ctx, q.getAllMerchantProductsStmt, getAllMerchantProducts, merchantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Image,
			&i.Sku,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
