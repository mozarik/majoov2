// Code generated by sqlc. DO NOT EDIT.
// source: user_query.sql

package postgres

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, password)
VALUES ($1, $2) 
RETURNING username, password
`

type CreateUserParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type CreateUserRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// WORK
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users 
WHERE id = $1
`

// WORK
func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, role FROM users
WHERE id = $1 LIMIT 1
`

// WORK
func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, username, password, role FROM users
`

// WORK
func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users SET password = $2
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
}

// WORK
func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.ID, arg.Password)
	return err
}

const updateUserToMerchant = `-- name: UpdateUserToMerchant :one
UPDATE users SET role = 'merchant'
WHERE username = $1
RETURNING id
`

// WORK
func (q *Queries) UpdateUserToMerchant(ctx context.Context, username string) (int32, error) {
	row := q.queryRow(ctx, q.updateUserToMerchantStmt, updateUserToMerchant, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}
